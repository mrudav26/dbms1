// Source code is decompiled from a .class file using FernFlower decompiler.
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import javax.servlet.annotation.WebServlet;

@WebServlet({"/userDAO"})
public class userDAO {
   private static final long serialVersionUID = 1L;
   private Connection connect = null;
   private Statement statement = null;
   private PreparedStatement preparedStatement = null;
   private ResultSet resultSet = null;

   public userDAO() {
   }

   protected void connect_func() throws SQLException {
      if (this.connect == null || this.connect.isClosed()) {
         try {
            Class.forName("com.mysql.cj.jdbc.Driver");
         } catch (ClassNotFoundException var2) {
            throw new SQLException(var2);
         }

         this.connect = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/testdb?allowPublicKeyRetrieval=true&useSSL=false&user=john&password=john1234");
         System.out.println(this.connect);
      }

   }

   public boolean database_login(String email, String password) throws SQLException {
      try {
         this.connect_func("root", "pass1234");
         String sql = "select * from user where email = ?";
         this.preparedStatement = this.connect.prepareStatement(sql);
         this.preparedStatement.setString(1, email);
         ResultSet rs = this.preparedStatement.executeQuery();
         return rs.next();
      } catch (SQLException var5) {
         System.out.println("failed login");
         return false;
      }
   }

   public void connect_func(String username, String password) throws SQLException {
      if (this.connect == null || this.connect.isClosed()) {
         try {
            Class.forName("com.mysql.cj.jdbc.Driver");
         } catch (ClassNotFoundException var4) {
            throw new SQLException(var4);
         }

         this.connect = DriverManager.getConnection("jdbc:mysql://127.0.0.1:3306/userdb?useSSL=false&user=" + username + "&password=" + password);
         System.out.println(this.connect);
      }

   }

   public List<user> listAllUsers() throws SQLException {
      List<user> listUser = new ArrayList();
      String sql = "SELECT * FROM User";
      this.connect_func();
      this.statement = this.connect.createStatement();
      ResultSet resultSet = this.statement.executeQuery(sql);

      while(resultSet.next()) {
        String firstName = resultSet.getString("firstName");
        String lastName = resultSet.getString("lastName");
        String phone = resultSet.getString("phone");
        String address_street_num = resultSet.getString("address_street_num"); 
        String address_street = resultSet.getString("address_street"); 
        String address_city = resultSet.getString("address_city"); 
        String address_state = resultSet.getString("address_state"); 
        String address_zip_code = resultSet.getString("address_zip_code"); 
        String cname = resultSet.getString("cname")
        String ccnum = resultSet.getString("ccnum")
        String cexp = resultSet.getString("cexp")
        String ccode = resultSet.getString("ccode")
        String email = resultSet.getString("email");
        String password = resultSet.getString("password");
        user users = new user(firstName, lastName, phone, address_street_num,  address_street,  address_city,  address_state,  address_zip_code, cname, ccnum, cexp, ccode, email, password);            listUser.add(users);
        listUser.add(users);
      }

      resultSet.close();
      this.disconnect();
      return listUser;
   }

   protected void disconnect() throws SQLException {
      if (this.connect != null && !this.connect.isClosed()) {
         this.connect.close();
      }

   }

   public void insert(user users) throws SQLException {
      this.connect_func("root", "pass1234");
      String sql = "insert into User(firstName, lastName, phone, address_street_num,  address_street,  address_city,  address_state,  address_zip_code, cname, ccnum, cexp, ccode, email, password) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ? ,? ,?, ?, ?)";
      this.preparedStatement.setString(1, users.getFirstName());
      this.preparedStatement.setString(2, users.getLastName());
      this.preparedStatement.setString(3, users.getPhone());
      this.preparedStatement.setString(4, users.getAddress_street_num());		
      this.preparedStatement.setString(5, users.getAddress_street());		
      this.preparedStatement.setString(6, users.getAddress_city());		
      this.preparedStatement.setString(7, users.getAddress_state());		
      this.preparedStatement.setString(8, users.getAddress_zip_code());
      this.preparedStatement.setString(9, users.getCname());
      this.preparedStatement.setString(10, users.getCcnum());
      this.preparedStatement.setString(11, users.getCexp());
      this.preparedStatement.setString(12, users.getCcode());
      this.preparedStatement.setString(13, users.getEmail());
      this.preparedStatement.setString(14, users.getPassword());      
      this.preparedStatement.executeUpdate();
      this.preparedStatement.close();
   }

   public boolean delete(String email) throws SQLException {
      String sql = "DELETE FROM User WHERE email = ?";
      this.connect_func();
      this.preparedStatement = this.connect.prepareStatement(sql);
      this.preparedStatement.setString(1, email);
      boolean rowDeleted = this.preparedStatement.executeUpdate() > 0;
      this.preparedStatement.close();
      return rowDeleted;
   }

   public boolean update(user users) throws SQLException {
      String sql = "update User set firstName=?, lastName =?,password = ?,birthday=?,address_street_num =?, address_street=?,address_city=?,address_state=?,address_zip_code=?, cash_bal=?, PPS_bal =? where email = ?";
      this.connect_func();
      this.preparedStatement = this.connect.prepareStatement(sql);
      this.preparedStatement.setString(1, users.getFirstName());
      this.preparedStatement.setString(2, users.getLastName());
      this.preparedStatement.setString(3, users.getPhone());
      this.preparedStatement.setString(4, users.getAddress_street_num());		
      this.preparedStatement.setString(5, users.getAddress_street());		
      this.preparedStatement.setString(6, users.getAddress_city());		
      this.preparedStatement.setString(7, users.getAddress_state());		
      this.preparedStatement.setString(8, users.getAddress_zip_code());
      this.preparedStatement.setString(9, users.getCname());
      this.preparedStatement.setString(10, users.getCcnum());
      this.preparedStatement.setString(11, users.getCexp());
      this.preparedStatement.setString(12, users.getCcode());
      this.preparedStatement.setString(13, users.getEmail());
      this.preparedStatement.setString(14, users.getPassword());
      boolean rowUpdated = this.preparedStatement.executeUpdate() > 0;
      this.preparedStatement.close();
      return rowUpdated;
   }

   public user getUser(String email) throws SQLException {
      user user = null;
      String sql = "SELECT * FROM User WHERE email = ?";
      this.connect_func();
      this.preparedStatement = this.connect.prepareStatement(sql);
      this.preparedStatement.setString(1, email);
      ResultSet resultSet = this.preparedStatement.executeQuery();
      if (resultSet.next()) {
         String firstName = resultSet.getString("firstName");
         String lastName = resultSet.getString("lastName");
         String phone = resultSet.getString("phone");
         String address_street_num = resultSet.getString("address_street_num"); 
         String address_street = resultSet.getString("address_street"); 
         String address_city = resultSet.getString("address_city"); 
         String address_state = resultSet.getString("address_state"); 
         String address_zip_code = resultSet.getString("address_zip_code"); 
         String cname = resultSet.getString("cname")
         String ccnum = resultSet.getString("ccnum")
         String cexp = resultSet.getString("cexp")
         String ccode = resultSet.getString("ccode")
         String email = resultSet.getString("email");
         String password = resultSet.getString("password");
         user = new user(firstName, lastName, phone, address_street_num,  address_street,  address_city,  address_state,  address_zip_code, cname, ccnum, cexp, ccode, email, password);
      }

      resultSet.close();
      this.statement.close();
      return user;
   }

   public boolean checkEmail(String email) throws SQLException {
      boolean checks = false;
      String sql = "SELECT * FROM User WHERE email = ?";
      this.connect_func();
      this.preparedStatement = this.connect.prepareStatement(sql);
      this.preparedStatement.setString(1, email);
      ResultSet resultSet = this.preparedStatement.executeQuery();
      System.out.println(checks);
      if (resultSet.next()) {
         checks = true;
      }

      System.out.println(checks);
      return checks;
   }

   public boolean checkPassword(String password) throws SQLException {
      boolean checks = false;
      String sql = "SELECT * FROM User WHERE password = ?";
      this.connect_func();
      this.preparedStatement = this.connect.prepareStatement(sql);
      this.preparedStatement.setString(1, password);
      ResultSet resultSet = this.preparedStatement.executeQuery();
      System.out.println(checks);
      if (resultSet.next()) {
         checks = true;
      }

      System.out.println(checks);
      return checks;
   }

   public boolean isValid(String email, String password) throws SQLException {
      String sql = "SELECT * FROM User";
      this.connect_func();
      this.statement = this.connect.createStatement();
      ResultSet resultSet = this.statement.executeQuery(sql);
      resultSet.last();
      int setSize = resultSet.getRow();
      resultSet.beforeFirst();

      for(int i = 0; i < setSize; ++i) {
         resultSet.next();
         if (resultSet.getString("email").equals(email) && resultSet.getString("password").equals(password)) {
            return true;
         }
      }

      return false;
   }

   public void init() throws SQLException, FileNotFoundException, IOException {
      this.connect_func();
      this.statement = this.connect.createStatement();
      String[] INITIAL = new String[]{"drop database if exists testdb; ", "create database testdb; ", "use testdb; ", "drop table if exists User; ", "CREATE TABLE if not exists User( email VARCHAR(50) NOT NULL, firstName VARCHAR(10) NOT NULL, lastName VARCHAR(10) NOT NULL, password VARCHAR(20) NOT NULL, birthday DATE NOT NULL, address_street_num VARCHAR(4) , address_street VARCHAR(30) , address_city VARCHAR(20),address_state VARCHAR(2),address_zip_code VARCHAR(5),cash_bal DECIMAL(13,2) DEFAULT 1000,PPS_bal DECIMAL(13,2) DEFAULT 0,PRIMARY KEY (email) ); "};
      String[] TUPLES = new String[]{"insert into User(email, firstName, lastName, password, birthday, address_street_num, address_street, address_city, address_state, address_zip_code, cash_bal, PPS_bal)values ('susie@gmail.com', 'Susie ', 'Guzman', 'susie1234', '2000-06-27', '1234', 'whatever street', 'detroit', 'MI', '48202','1000', '0'),('don@gmail.com', 'Don', 'Cummings','don123', '1969-03-20', '1000', 'hi street', 'mama', 'MO', '12345','1000', '0'),('margarita@gmail.com', 'Margarita', 'Lawson','margarita1234', '1980-02-02', '1234', 'ivan street', 'tata','CO','12561','1000', '0'),('jo@gmail.com', 'Jo', 'Brady','jo1234', '2002-02-02', '3214','marko street', 'brat', 'DU', '54321','1000', '0'),('wallace@gmail.com', 'Wallace', 'Moore','wallace1234', '1971-06-15', '4500', 'frey street', 'sestra', 'MI', '48202','1000', '0'),('amelia@gmail.com', 'Amelia', 'Phillips','amelia1234', '2000-03-14', '1245', 'm8s street', 'baka', 'IL', '48000','1000', '0'),('sophie@gmail.com', 'Sophie', 'Pierce','sophie1234', '1999-06-15', '2468', 'yolos street', 'ides', 'CM', '24680','1000', '0'),('angelo@gmail.com', 'Angelo', 'Francis','angelo1234', '2021-06-14', '4680', 'egypt street', 'lolas', 'DT', '13579','1000', '0'),('rudy@gmail.com', 'Rudy', 'Smith','rudy1234', '1706-06-05', '1234', 'sign street', 'samo ne tu','MH', '09876','1000', '0'),('jeannette@gmail.com', 'Jeannette ', 'Stone','jeannette1234', '2001-04-24', '0981', 'snoop street', 'kojik', 'HW', '87654','1000', '0'),('root', 'default', 'default','pass1234', '2020-02-03', '0000', 'Default', 'Default', '0', '00000','1000','1000000000');"};

      int i;
      for(i = 0; i < INITIAL.length; ++i) {
         this.statement.execute(INITIAL[i]);
      }

      for(i = 0; i < TUPLES.length; ++i) {
         this.statement.execute(TUPLES[i]);
      }

      this.disconnect();
   }
}
